name: Substrate Build
on:
  push:
    branches:
      - android
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        target: [host, android]
    steps:
      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install at-spi2-core build-essential libgtk-3-dev libxtst-dev libavcodec-dev libavformat-dev libasound2-dev libgl-dev
          sudo apt-get install xvfb tigervnc-standalone-server tigervnc-common

      - name: Install packages (MacOS)
        if: runner.os == 'macOS'
        run: |
          brew install --HEAD libusbmuxd libimobiledevice

      - name: Install GraalVM (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir -p $HOME/graalvm && cd $HOME/graalvm
          wget https://download2.gluonhq.com/substrate/graalvm/graalvm-svm-linux-20.2-latest.zip
          unzip graalvm-svm-linux-20.2-latest && cd $GITHUB_WORKSPACE

      - name: Install GraalVM (MacOS)
        if: runner.os == 'macOS'
        run: |
          mkdir -p $HOME/graalvm && cd $HOME/graalvm
          wget https://download2.gluonhq.com/substrate/graalvm/graalvm-svm-darwin-20.2-latest.zip
          unzip graalvm-svm-darwin-20.2-latest && cd $GITHUB_WORKSPACE

      - name: Install linux JavaFX static libs (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir -p $HOME/javafx-static-libs-linux && cd $HOME/javafx-static-libs-linux
          wget https://download2.gluonhq.com/substrate/javafxstaticsdk/openjfx-15-latest-linux-x86_64-static.zip
          unzip openjfx-15-latest-linux-x86_64-static.zip && cd $GITHUB_WORKSPACE

      - name: Install darwin JavaFX static libs (MacOS)
        if: runner.os == 'macOS'
        run: |
          mkdir -p $HOME/javafx-static-libs-darwin && cd $HOME/javafx-static-libs-darwin
          wget https://download2.gluonhq.com/substrate/javafxstaticsdk/openjfx-15-latest-darwin-x86_64-static.zip
          unzip openjfx-15-latest-darwin-x86_64-static.zip && cd $GITHUB_WORKSPACE

      - name: Install iOS JavaFX static libs (MacOS)
        if: runner.os == 'macOS'
        run: |
          mkdir -p $HOME/javafx-static-libs-ios && cd $HOME/javafx-static-libs-ios
          wget https://download2.gluonhq.com/substrate/javafxstaticsdk/openjfx-15-latest-ios-arm64-static.zip
          unzip openjfx-15-latest-ios-arm64-static.zip && cd $GITHUB_WORKSPACE

      - name: Install Android SDK and NDK (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'android'
        run: |
          bash .github/scripts/android.sh runner.os
          # mkdir -p $HOME/android-sdk && cd $HOME/android-sdk
          # wget https://dl.google.com/android/repository/commandlinetools-linux-6200805_latest.zip
          # unzip commandlinetools-linux-6200805_latest.zip
          # tools/bin/sdkmanager "platforms;android-27" "build-tools;27.0.3" "platform-tools" "extras;android;m2repository" "extras;google;m2repository" "ndk-bundle"
          # Android NDK
          # mkdir -p $HOME/android-ndk && cd $HOME/android-ndk
          # wget https://dl.google.com/android/repository/android-ndk-r21b-linux-x86_64.zip
          # unzip android-ndk-r21b-linux-x86_64.zip
          # ls

      - name: Install Android SDK and NDK (MacOS)
        if: matrix.os == 'macos-latest' && matrix.target == 'android'
        run: |
          # Android SDK
          bash .github/scripts/android.sh runner.os
          # Android NDK
          # mkdir -p $HOME/android-ndk && cd $HOME/android-ndk
          # wget https://dl.google.com/android/repository/android-ndk-r21b-darwin-x86_64.zip
          # unzip android-ndk-r21b-darwin-x86_64.zip
          # ls

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Host Tests (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'host'
        run: |
          export GRAALVM_HOME=$HOME/graalvm/graalvm-svm-linux-20.2-latest
          export JAVAFX_STATIC_SDK=$HOME/javafx-static-libs-linux/sdk
          export DISPLAY=:90
          mkdir /home/runner/.vnc
          echo 123456 | vncpasswd -f > /home/runner/.vnc/passwd
          chmod -v 600 /home/runner/.vnc/passwd
          vncserver :90 -localhost -nolisten tcp
          ./gradlew -i test
          vncserver -kill :90

      - name: Run Host Tests (MacOS)
        if: matrix.os == 'macos-latest' && matrix.target == 'host'
        run: |
          export GRAALVM_HOME=$HOME/graalvm/graalvm-svm-darwin-20.2-latest
          export JAVAFX_STATIC_SDK=$HOME/javafx-static-libs-darwin/sdk
          export JAVAFX_STATIC_SDK_IOS=$HOME/javafx-static-libs-ios/sdk
          ./gradlew -i test
          
      - name: Run Android Tests (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'android'
        run: |
          export GRAALVM_HOME=$HOME/graalvm/graalvm-svm-linux-20.2-latest
          export JAVAFX_STATIC_SDK=$HOME/javafx-static-libs-linux/sdk
          export ANDROID_SDK=$HOME/android-sdk
          export DISPLAY=:90
          mkdir /home/runner/.vnc
          echo 123456 | vncpasswd -f > /home/runner/.vnc/passwd
          chmod -v 600 /home/runner/.vnc/passwd
          vncserver :90 -localhost -nolisten tcp
          ./gradlew -i test -Pandroid
          vncserver -kill :90
  
      - name: Run Android Tests (MacOS)
        if: matrix.os == 'macos-latest' && matrix.target == 'android'
        run: |
          export GRAALVM_HOME=$HOME/graalvm/graalvm-svm-darwin-20.2-latest
          export JAVAFX_STATIC_SDK=$HOME/javafx-static-libs-darwin/sdk
          export JAVAFX_STATIC_SDK_IOS=$HOME/javafx-static-libs-ios/sdk
          export ANDROID_SDK=$HOME/android-sdk
          ./gradlew -i test -Pandroid

      - name: Build project
        run: ./gradlew -i build -x test

      - name: Deploy Snapshot
        if: runner.os == 'Linux' && github.ref == 'refs/heads/master'
        run: ./gradlew publish -PsonatypeUsername=$SONATYPE_USERNAME -PsonatypePassword=$SONATYPE_PASSWORD
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}